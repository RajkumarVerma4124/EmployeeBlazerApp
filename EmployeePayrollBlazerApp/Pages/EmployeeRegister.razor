@page "/Register"
@using CommonLayer.Models;
@using BusinessLayer.Interface;
@using MatBlazor;
@using System.Threading

@inject IEmployeeRegisterBL employeeBL;
@inject NavigationManager navigate;


<!--Creating the header element with logo and text using flex and css for homepage(UC14)-->
<header class="header-content header">
    <div class="logo-content">
        <img src="./assets/images/logo.png" alt="Logo" />
        <div class="emp_text">
            <span><a href="HomePage">Employee</a></span><br>
            <span class="emp_text_payroll">Payroll</span>
        </div>
    </div>
</header>

<!--Creating the form element with input name-->
<div class="form-content">
    <form class="form">
        <EditForm Model="@employee" OnValidSubmit="@(() => { AddEmp(); HandleValidSubmit(); })">
            <span class="form-head">Employee Payroll Register</span>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row-content">
                <label class="label text label-bold" for="empName">Employ Name</label>
                <input type="text" class="input" name="empName" @bind-value="@employee.Name" id="empName" placeholder="Enter Your Name Here..." required>
                <error class="error" id="errorName"></error>
            </div>

            <!--Creating the form element with input type radio to select profile pic-->
            <div class="row-content">
                <label class="label text label-bold" for="profiles">Profile Image</label>
                <div class="profile-checkbox-content">
                    <label>
                        <input type="checkbox" class="largerCheckbox" id="profile1" name="profile" value="./assets/profile-images/Ellipse -1.png" @onchange="@(()=> AddImg("./assets/profile-images/Ellipse -1.png"))" />
                        <img class="profile" id="img1" src="./assets/profile-images/Ellipse -1.png" />
                    </label>
                    <label>
                        <input type="checkbox" class="largerCheckbox" id="profile2" name="profile" value="./assets/profile-images/Ellipse -2.png" @onchange="@(()=> AddImg("./assets/profile-images/Ellipse -2.png"))" />
                        <img class="profile" id="img2" src="./assets/profile-images/Ellipse -2.png" />
                    </label>
                    <label>
                        <input type="checkbox" class="largerCheckbox" id="profile3" name="profile" value="./assets/profile-images/Ellipse -3.png" @onchange="@(()=> AddImg("./assets/profile-images/Ellipse -3.png"))" />
                        <img class="profile" id="img3" src="./assets/profile-images/Ellipse -3.png" />
                    </label>
                    <label>
                        <input type="checkbox" class="largerCheckbox"id="profile4" name="profile" value="./assets/profile-images/Ellipse -4.png" @onchange="@(()=> AddImg("./assets/profile-images/Ellipse -4.png"))" />
                        <img class="profile" id="img4" src="./assets/profile-images/Ellipse -4.png" />
                    </label>
                </div>
            </div>

            <!--Creating the form element with input type radio to select gender-->

            <div class="row-content">
                <label class="label text label-bold" for="gender">Gender</label>
                <MatRadioGroup @bind-Value="@Types" Items="@Genders">
                </MatRadioGroup>
                @if (Types != null)
                {
                    employee.Gender = Types;
                }
            </div>

            <!--Creating the form element with input type checkbox to select department-->
            <div class="row-content">
                <label class="label text label-bold" for="department"> Department</label>
                <select class="ip" name="department" id="department" @bind="@employee.Department" required>
                    <option class="option" value="--">-- Department --</option>
                    <option class="option" value="Robotics">Robotics</option>
                    <option class="option" value="Devops">Devops</option>
                    <option class="option" value="Web Developer">Web Developer</option>
                    <option class="option" value="Finance">Finance</option>
                    <option class="option" value="Business">Business</option>
                    <option class="option" value="HR">HR</option>
                    <option class="option" value="ML">Machine Learning</option>
                </select>
            </div>

            <!--Creating the form element with input type range to select salary(UC4)-->
            <div class="row-content">
                <label class="label text label-bold" for="salary">Salary</label>
                <input class="input input-salary" @bind="@employee.Salary" type="number" defaultvalue="360000" min="200000" max="800000" step="1000" required>
            </div>

            <!--Creating the form element with select to select day, month and year(UC5)-->
            <div class="row-content">
                <label class="label text label-bold" for="startDate">Start Date</label>
                <input class="input input-salary" @bind="@employee.StartDate" type="date" placeholder="yyyy/MM/dd" />
            </div>

            <!--Creating the form element with notes and buttons(UC6)-->
            <div class="row-content">
                <label class="label text label-bold" for="notes">Notes</label>
                <textarea rows="4" class="input" @bind="@employee.Notes" placeholder="Enter Any Notes or Comments here" id="notes" style="height: 100px;" required></textarea>
            </div>
            <div class="button_container">
                <a href="HomePage" @onclick="@Cancel" class="button cancel_button">Cancel</a>
                <div class="buttons">
                    <button type="submit" class="submit_button button" id="submitButton">Submit</button>
                    <button @onclick="@Reset" type="reset" class="reset_button button">Reset</button>
                </div>
                <MatSnackbar @bind-IsOpen="@snackBarSubmit">
                    <a href="HomePage" class="snackbarSubmit">
                        <span class="oi oi-play-circle icon"></span>
                        <MatSnackbarContent Style="font-size:20px;color:#f7f7f7">Employee Registered Succesfully....!!!</MatSnackbarContent>
                    </a>
                </MatSnackbar>

                <MatSnackbar @bind-IsOpen="@snackBarReset">
                    <a class="snackbarReset">
                        <span class="oi oi-reload icon"></span>
                        <MatSnackbarContent Style="margin-left: 3px; font-size:20px;color:#f7f7f7">Reseted Employee Data...!!!</MatSnackbarContent>
                    </a>
                </MatSnackbar>
            </div>
        </EditForm>
    </form>
</div>
@code {
    /// <summary>
    /// Initializing Variables And Object
    /// </summary>
    string checked1 = "./assets/profile-images/Ellipse -1.png";
    bool snackBarSubmit = false;
    bool snackBarReset = false;
    EmployeeModel employee = new EmployeeModel();
    protected string Types;

    protected string[] Genders =
                    {
        "Male",
        "Female",
        "Others",
    };

    /// <summary>
    /// Method To Validate On Form Submit
    /// </summary>
    protected void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    /// <summary>
    /// Method To Add Employee To Database
    /// </summary>
    protected void AddEmp()
    {
        employeeBL.AddEmployee(employee);
        snackBarSubmit = true;
        this.StateHasChanged();
    }

    /// <summary>
    /// Method To Add Employee To Employee Model For Binding
    /// </summary>
    /// <param name="img"></param>
    protected void AddImg(string img)
    {
        employee.ProfileImg = img;
    }

    /// <summary>
    ///  Method To Add Gender To Employee Model Binding
    /// </summary>
    /// <param name="type"></param>
    protected void AddGender(string type)
    {
        employee.Gender = type;
    }

    /// <summary>
    /// Method To Cancel Form Submission
    /// </summary>
    void Cancel()
    {
        this.StateHasChanged();
        GoBack();
    }

    /// <summary>
    /// Method To Reset Form Reset Data
    /// </summary>
    void Reset()
    {
        snackBarReset = true;
        this.StateHasChanged();
    }

    /// <summary>
    /// Method To Navigate To HomePage
    /// </summary>
    void GoBack()
    {
        navigate.NavigateTo("HomePage");
    }
}
